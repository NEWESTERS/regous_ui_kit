{"version":3,"sources":["controls/Input/index.tsx","controls/Input2/index.tsx","controls/Modal/index.tsx","controls/Datepicker/Calendar/MonthGrid/index.tsx","controls/Datepicker/Calendar/index.tsx","controls/Datepicker/index.tsx","controls/SegmentedSwitch/index.tsx","controls/Switch/index.tsx","controls/Dropdown/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Input","state","isFocused","_this","props","defaultFocused","inputRef","focus","_this2","this","_this$props","valid","value","onChange","label","pattern","width","numeric","dotted","className","type","react","classnames","text-input","invalid","focused","not-empty","onClick","style","ref","_ref","currentTarget","autoFocus","onFocus","setState","onBlur","React","defaultProps","placeholder","Portal","portalRef","document","createElement","classList","add","body","appendChild","ontouchmove","e","preventDefault","onOpen","removeChild","remove","onClose","children","ReactDOM","createPortal","Modal","open","rest","Object","objectWithoutProperties","Modal_Portal","DAYS_OF_WEEK","MonthGrid","getDaysForMonth","num","date","moment","displayedDate","arr","offset","parseInt","format","days","daysInMonth","buf","i","j","push","undefined","renderDay","day","dayIndex","key","selectedDate","onDayClick","selected","isSame","weekend","weekday","startOf","map","index","week","weekIndex","Calendar","calendarDate","yearString","year","toString","monthString","month","handleYearChange","test","handleMonthChange","_ref2","handleMonthDecrease","subtract","handleMonthIncrease","_ref3","_this$state","Input_Input","MonthGrid_MonthGrid","Datepicker","isModalOpen","concat","src_controls_Modal","Calendar_Calendar","SegmentedSwitch","data","selectedKey","segmentWidth","length","minWidth","segment","active","text","Switch","Dropdown","isActive","dropdownRef","handleDropdownClick","blur","handleInputClick","displayedValue","find","item","empty","title","onMouseDown","readOnly","option","switchData","dropdownData","App","firstInputText","secondInputText","switchEnabled","switchSelectedKey","dropdownSelectedKey","react_default","a","toLowerCase","Input2_Input","Datepicker_Datepicker","Dropdown_Dropdown","src_controls_Switch","src_controls_SegmentedSwitch","Component","Boolean","window","location","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qbAyBqBA,oNAMVC,MAAgB,CACnBC,UAAWC,EAAKC,MAAMC,kBAGnBC,SAAoC,OAE3CC,MAAQ,WACJJ,EAAKG,UAAYH,EAAKG,SAASC,iFAG1B,IAAAC,EAAAC,KAAAC,EACiFD,KAAKL,MAAnFO,EADHD,EACGC,MAAOC,EADVF,EACUE,MAAOC,EADjBH,EACiBG,SAAUC,EAD3BJ,EAC2BI,MAAOC,EADlCL,EACkCK,QAASC,EAD3CN,EAC2CM,MAAOC,EADlDP,EACkDO,QAASC,EAD3DR,EAC2DQ,OAAQC,EADnET,EACmES,UAClEjB,EAAcO,KAAKR,MAAnBC,UACFkB,EACIF,EAAS,WACLD,EAAU,MACN,OAEhB,OACII,EAAA,qBACIF,UAAYG,IAAWH,EAAW,CAC9BI,cAAc,EACdC,SAAYb,EACZc,QAAWvB,EACXwB,YAAuB,KAAVd,IAEjBe,QAAUlB,KAAKF,MACfqB,MAAQ,CAAEZ,UAERF,GAASO,EAAA,2BAASP,GAEpBO,EAAA,uBACID,KAAOA,EACPS,IAAM,SAAAA,GAAG,OAAIrB,EAAKF,SAAWuB,GAC7BjB,MAAQA,EACRC,SAAW,SAAAiB,GAAA,IAAoBlB,EAApBkB,EAAGC,cAAiBnB,MAApB,OAAkCC,EAASD,IACtDoB,UAAY9B,EACZ+B,QAAU,kBAAMzB,EAAK0B,SAAS,CAAEhC,WAAW,KAC3CiC,OAAS,kBAAM3B,EAAK0B,SAAS,CAAEhC,WAAW,KAC1Ca,QAAUA,YA7CKqB,cAAdpC,EACVqC,aAA8B,CACjC1B,OAAO,EACPN,gBAAgB,aCFHL,6MAMVC,MAAgB,CACnBC,UAAWC,EAAKC,MAAMC,kBAGnBC,SAAoC,OAE3CC,MAAQ,WACJJ,EAAKG,UAAYH,EAAKG,SAASC,iFAG1B,IAAAC,EAAAC,KAAAC,EAC8FD,KAAKL,MAAhGO,EADHD,EACGC,MAAOC,EADVF,EACUE,MAAOC,EADjBH,EACiBG,SAAUC,EAD3BJ,EAC2BI,MAAOC,EADlCL,EACkCK,QAASC,EAD3CN,EAC2CM,MAAOC,EADlDP,EACkDO,QAASC,EAD3DR,EAC2DQ,OAAQC,EADnET,EACmES,UAAWmB,EAD9E5B,EAC8E4B,YAC7EpC,EAAcO,KAAKR,MAAnBC,UACFkB,EACIF,EAAS,WACLD,EAAU,MACN,OAEhB,OACII,EAAA,qBACIF,UAAYG,IAAWH,EAAW,CAC9BI,cAAc,EACdC,SAAYb,EACZc,QAAWvB,EACXwB,YAAuB,KAAVd,IAEjBe,QAAUlB,KAAKF,MACfqB,MAAQ,CAAEZ,UAERF,GAASO,EAAA,uBAAOF,UAAU,eAAgBL,GAE1CwB,GAAejB,EAAA,qBAAKF,UAAU,qBAAsBmB,GAEtDjB,EAAA,uBACID,KAAOA,EACPS,IAAM,SAAAA,GAAG,OAAIrB,EAAKF,SAAWuB,GAC7BjB,MAAQA,EACRC,SAAW,SAAAiB,GAAA,IAAoBlB,EAApBkB,EAAGC,cAAiBnB,MAApB,OAAkCC,EAASD,IACtDoB,UAAY9B,EACZ+B,QAAU,kBAAMzB,EAAK0B,SAAS,CAAEhC,WAAW,KAC3CiC,OAAS,kBAAM3B,EAAK0B,SAAS,CAAEhC,WAAW,KAC1Ca,QAAUA,YA/CKqB,aAAdpC,EACVqC,aAA8B,CACjC1B,OAAO,EACPN,gBAAgB,eCjBlBkC,oNACKC,UAAYC,SAASC,cAAc,0FAGtCjC,KAAK+B,UAAUG,UAAUC,IAAI,mBAC7BH,SAASI,KAAKC,YAAYrC,KAAK+B,WAC/BC,SAASI,KAAKF,UAAUC,IAAI,aAC5BH,SAASI,KAAKE,YAAc,SAACC,GAAD,OAAmBA,EAAEC,kBAEjDxC,KAAKL,MAAM8C,QAAUzC,KAAKL,MAAM8C,wDAIhCT,SAASI,KAAKM,YAAY1C,KAAK+B,WAC/BC,SAASI,KAAKF,UAAUS,OAAO,aAC/BX,SAASI,KAAKE,YAAc,SAACC,GAAD,OAAmB,GAE/CvC,KAAKL,MAAMiD,SAAW5C,KAAKL,MAAMiD,2CAG5B,IAAA3C,EACoCD,KAAKL,MAAtCkD,EADH5C,EACG4C,SAAUnC,EADbT,EACaS,UAAWkC,EADxB3C,EACwB2C,QAE7B,OAAOE,IAASC,aACZnC,EAAA,cAAAA,EAAA,cACIA,EAAA,qBAAKF,UAAU,6BAA6BQ,QAAU0B,IACtDhC,EAAA,qBAAKF,UAAYG,IAAW,gBAAiBH,IACvCmC,IAGV7C,KAAK+B,kBA9BIJ,cA0CNqB,EAHsC,SAAA3B,GAAA,IAAG4B,EAAH5B,EAAG4B,KAAMJ,EAATxB,EAASwB,SAAaK,EAAtBC,OAAAC,EAAA,EAAAD,CAAA9B,EAAA,4BACjD4B,EAAOrC,EAAA,cAACyC,EAAYH,EAASL,GAAsB,sBCxCjDS,SAAe,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,iBAErCC,6MACjBC,gBAAkB,WAUd,IATA,IAOIC,EAPEC,EAAOC,IAAOjE,EAAKC,MAAMiE,eAE3BC,EAAM,GACNC,EAASC,SAASL,EAAKA,KAAK,GAAGM,OAAO,MACtCC,EAAOP,EAAKQ,cAEZC,EAAM,GAGFC,EAAI,EAAGA,EARH,EAQcA,IAAK,CAC3BD,EAAM,GAEN,IAAI,IAAIE,EAAI,EAAGA,EAAI,EAAGA,KAClBZ,EAAU,EAAJW,EAAQC,EAAI,GACRP,GAAUL,EAAMK,GAAUG,EAChCE,EAAIG,KAAKX,IAAOD,GAAMA,KAAKD,EAAMK,IAEjCK,EAAIG,UAAKC,GAIjBV,EAAIS,KAAKH,GAGb,OAAON,KAGXW,UAAY,SAACC,EAAgCC,GACzC,QAAWH,IAARE,EACC,OAAO7D,EAAA,qBAAK+D,IAAMD,EAAWhE,UAAU,oBAFmB,IAAAT,EAKzBP,EAAKC,MAAlCiF,EALsD3E,EAKtD2E,aAAcC,EALwC5E,EAKxC4E,WAEtB,OACIjE,EAAA,qBACI+D,IAAMD,EACNhE,UACI,iBACAG,IAAW,CACPiE,SAAYF,EAAaG,OAAON,EAAK,OACrCO,QAAWP,EAAIQ,WAAa,IAGpC/D,QAAU,WAAQ2D,EAAWJ,EAAIS,QAAQ,QAC1CT,EAAIf,iFAIN,IAAA3D,EAAAC,KACL,OACIY,EAAA,qBAAKF,UAAU,SACXE,EAAA,qBAAKF,UAAU,QACT4C,EAAa6B,IAAI,SAACF,EAASG,GAAV,OACfxE,EAAA,qBAAK+D,IAAMS,EAAQ1E,UAAU,WAAYuE,MAI/CjF,KAAKwD,kBAAkB2B,IAAI,SAACE,EAAMC,GAAP,OACzB1E,EAAA,qBAAKF,UAAU,OAAOiE,IAAMW,GACxBD,EAAKF,IAAIpF,EAAKyE,sBA9DC7C,aCIlB4D,oNACVX,kBAAoCL,IAArB7E,EAAKC,MAAMQ,MAAsBwD,IAAOjE,EAAKC,MAAMQ,OAASwD,QAE3EnE,MAAgB,CACnBgG,aAAc9F,EAAKkF,aACnBa,WAAY/F,EAAKkF,aAAac,OAAOC,WACrCC,aAAclG,EAAKkF,aAAaiB,QAAU,GAAGF,cASjDG,iBAAmB,SAACL,GAChB,GAAI,eAAeM,KAAKN,GAAxB,CAEA,IAAMC,EAAO3B,SAAS0B,GAEtB/F,EAAK+B,SAAS,SAAAJ,GAAA,IAAGmE,EAAHnE,EAAGmE,aAAH,MAAuB,CACjCC,aACAD,aAAc7B,IAAO6B,GAAcE,KAAKA,UAIhDM,kBAAoB,SAACJ,GACjB,IAAMC,EAAQ9B,SAAS6B,GAAe,EAEnCC,GAAS,GAAKA,GAAS,GACtBnG,EAAK+B,SAAS,SAAAwE,GAAA,IAAGT,EAAHS,EAAGT,aAAH,MAAuB,CACjCI,cACAJ,aAAc7B,IAAO6B,GAAcK,MAAMA,MAEtC,eAAeE,KAAKH,IAC3BlG,EAAK+B,SAAS,CAAEmE,mBAIxBM,oBAAsB,WAClB,IAAMV,EAAe7B,IAAOjE,EAAKF,MAAMgG,cAEvCA,EAAaW,SAAS,EAAG,SAEzBzG,EAAK+B,SAAS,CAAE+D,oBAGpBY,oBAAsB,WAClB,IAAMZ,EAAe7B,IAAOjE,EAAKF,MAAMgG,cAEvCA,EAAarD,IAAI,EAAG,SAEpBzC,EAAK+B,SAAS,CAAE+D,uGA3CkBa,EAAjBlG,QACJH,KAAKL,MAAMQ,QACpBH,KAAK4E,kBAAoCL,IAArBvE,KAAKL,MAAMQ,MAAsBwD,IAAO3D,KAAKL,MAAMQ,OAASwD,wCA4C/E,IAAA2C,EAC6CtG,KAAKR,MAA/CgG,EADHc,EACGd,aAAcC,EADjBa,EACiBb,WAAYG,EAD7BU,EAC6BV,YAC5Bf,EAAe7E,KAAKL,MAApBkF,WAEN,OACIjE,EAAA,qBAAKF,UAAU,YACXE,EAAA,qBAAKF,UAAU,eACXE,EAAA,cAAC2F,EAAD,CACIlG,MAAM,iCACNF,MAAQyF,EACRxF,SAAWJ,KAAKgG,kBAChBzF,MAAQ,GACRC,SAAO,IAGXI,EAAA,cAAC2F,EAAD,CACIlG,MAAM,qBACNF,MAAQsF,EACRrF,SAAWJ,KAAK8F,iBAChBvF,MAAQ,GACRC,SAAO,KAIfI,EAAA,qBAAKF,UAAU,kBACXE,EAAA,qBAAKF,UAAU,uBAAuBQ,QAAUlB,KAAKkG,sBACrDtF,EAAA,uBAAOF,UAAU,kBAAmB8E,EAAaxB,OAAO,cACxDpD,EAAA,qBAAKF,UAAU,wBAAwBQ,QAAUlB,KAAKoG,uBAG1DxF,EAAA,cAAC4F,EAAD,CACI5B,aAAe5E,KAAK4E,aACpBhB,cAAgB4B,EAChBX,WAAa,SAACnB,GAAD,OAAUmB,EAAWnB,cAxFhB/B,cCDjB8E,oNACVjH,MAAgB,CACnBkH,aAAa,KAGjB7B,WAAa,SAAC1E,GACVT,EAAKC,MAAMS,SAASD,GAEpBT,EAAK+B,SAAS,CACViF,aAAa,6EAIZ,IAAA3G,EAAAC,KAAAC,EACoBD,KAAKL,MAAtBQ,EADHF,EACGE,MAAOE,EADVJ,EACUI,MACTqG,EAAgB1G,KAAKR,MAArBkH,YAEN,OACI9F,EAAA,qBAAKF,UAAU,oBACXE,EAAA,qBACIF,UAAS,2BAAAiG,YAAyCpC,IAAVpE,EAAsB,aAAe,IAC7Ee,QAAU,kBAAMnB,EAAK0B,SAAS,CAAEiF,aAAa,MAE3CrG,GAASO,EAAA,uBAAOF,UAAU,aAAcL,QAC9BkE,IAAVpE,GAAuBA,EAAM6D,OAAO,eAG1CpD,EAAA,cAACgG,EAAD,CACI3D,KAAOyD,EACP9D,QAAU,kBAAM7C,EAAK0B,SAAS,CAAEiF,aAAa,MAE7C9F,EAAA,qBAAKF,UAAU,oBACXE,EAAA,qBAAKF,UAAU,yBAAyBQ,QAAU,kBAAMnB,EAAK0B,SAAS,CAAEiF,aAAa,OACnFrG,GAASO,EAAA,wBAAMP,GAEjBO,EAAA,cAACiG,EAAD,CACI1G,MAAQA,EACR0E,WAAa7E,KAAK6E,uBArCNlD,cC4BzBmF,SA/BS,SAAAzF,GAA2D,IAAxD0F,EAAwD1F,EAAxD0F,KAAMC,EAAkD3F,EAAlD2F,YAAa5G,EAAqCiB,EAArCjB,SAAUC,EAA2BgB,EAA3BhB,MAAOE,EAAoBc,EAApBd,MACrD0G,EAAY,GAAAN,OAAO,IAAMI,EAAKG,OAAlB,KAElB,OACItG,EAAA,qBACIF,UAAU,mBACVS,MAAQ,CAAEgG,SAAU5G,IAElBF,GAASO,EAAA,uBAAOF,UAAU,kBAAmBL,GAC/CO,EAAA,qBAAKF,UAAU,sBAEXqG,EAAK5B,IAAI,SAAAiC,GAAO,OACZxG,EAAA,qBACI+D,IAAMyC,EAAQzC,IACdjE,UAAYG,IACR,oBACA,CAAEwG,OAAUD,EAAQzC,MAAQqC,IAEhC9F,QAAU,kBAAMd,EAASgH,EAAQzC,MACjCxD,MAAQ,CAAEZ,MAAO0G,IAEfG,EAAQE,YCVnBC,SAfA,SAAAlG,GAAA,IAAGlB,EAAHkB,EAAGlB,MAAOC,EAAViB,EAAUjB,SAAV,OACXQ,EAAA,qBACIF,UAAYG,IACR,YACA,SACA,CAAEwG,OAAUlH,IAEhBe,QAAU,kBAAMd,GAAUD,KAG1BS,EAAA,qBAAKF,UAAU,aACXE,EAAA,qBAAKF,UAAU,aCCN8G,oNACVhI,MAAgB,CACnBiI,UAAU,KAGPC,YAAuC,OAE9CC,oBAAsB,WACM,OAArBjI,EAAKgI,cAILhI,EAAKF,MAAMiI,SACV/H,EAAKgI,YAAYE,OAEjBlI,EAAKgI,YAAY5H,YAIzB+H,iBAAmB,SAACtF,GAChBA,EAAEC,iBAEC9C,EAAKF,MAAMiI,SACV/H,EAAKgI,YAAaE,OAElBlI,EAAKgI,YAAa5H,iFAIjB,IAAAC,EAAAC,KACGyH,EAAazH,KAAKR,MAAlBiI,SAAFxH,EACuCD,KAAKL,MAA5CoH,EADA9G,EACA8G,KAAMC,EADN/G,EACM+G,YAAa5G,EADnBH,EACmBG,SAAUC,EAD7BJ,EAC6BI,MAC/ByH,OAAiCvD,IAAhByC,EAA4BD,EAAKgB,KAAK,SAAAC,GAAI,OAAIA,EAAKrD,MAAQqC,IAAcM,UAAO/C,EAErG,OACI3D,EAAA,qBACIF,UACI,sBACAG,IAAW,CACPwG,OAAUI,EACVQ,WAAyB1D,IAAhByC,IAGjBkB,MAAQJ,GAENzH,GAASO,EAAA,2BAASP,GACpBO,EAAA,uBACID,KAAK,OACLD,UAAU,uBACVU,IAAM,SAAAA,GAAG,OAAIrB,EAAK2H,YAActG,GAChCM,OAAS,SAACa,GAAQA,EAAEC,iBAAkBzC,EAAK0B,SAAS,CAAEgG,UAAU,KAChEjG,QAAU,SAACe,GAAQA,EAAEC,iBAAkBzC,EAAK0B,SAAS,CAAEgG,UAAU,KACjEU,YAAcnI,KAAK6H,iBACnBO,UAAQ,IAEVN,GAAkBlH,EAAA,qBAAKF,UAAU,mBAAoBoH,GACvDlH,EAAA,qBAAKF,UAAU,UAEfE,EAAA,qBAAKF,UAAU,QAEXqG,EAAK5B,IAAI,SAAAkD,GAAM,OACXzH,EAAA,qBACI+D,IAAM0D,EAAO1D,IACbjE,UAAS,SAAAiG,OAAa0B,EAAO1D,MAAQqC,EAAc,YAAa,IAChEmB,YAAc,kBAAM/H,EAASiI,EAAO1D,OACrC0D,EAAOf,iBAjEI3F,cCFhC2G,SAAwB,CAC7B,CAAE3D,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,kCAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,0CAGrBiB,EAA0B,CAC/B,CAAE5D,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,8CAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,kCAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,wCAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,kCAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,wCAC1B,CAAE3C,IAAK,EAAGxE,MAAO,EAAGmH,KAAM,iEAuFZkB,6MAnFPhJ,MAAgB,CACtBiJ,eAAgB,GAChBC,gBAAiB,GACjBC,eAAe,2EAGP,IAAA5I,EAAAC,KAAAsG,EAKJtG,KAAKR,MAHRiJ,EAFOnC,EAEPmC,eAAgBC,EAFTpC,EAESoC,gBAChBhF,EAHO4C,EAGP5C,KACAkF,EAJOtC,EAIPsC,kBAAmBD,EAJZrC,EAIYqC,cAAeE,EAJ3BvC,EAI2BuC,oBAGnC,OACCC,EAAAC,EAAA9G,cAAA,OAAKvB,UAAU,OACdoI,EAAAC,EAAA9G,cAAA,iEAEA6G,EAAAC,EAAA9G,cAAA,6FAEA6G,EAAAC,EAAA9G,cAACsE,EAAD,CACClG,MAAM,kFACNF,MAAQsI,EACRrI,SAAW,SAACqI,GAAD,OAAoB1I,EAAK0B,SAAS,CAAEgH,oBAC/CvI,MAA4C,WAApCuI,EAAeO,cAAc,KAGtCF,EAAAC,EAAA9G,cAAA,WAEA6G,EAAAC,EAAA9G,cAACgH,EAAD,CACC5I,MAAM,uHACNwB,YAAY,yFACZ1B,MAAQuI,EACRtI,SAAW,SAACsI,GAAD,OAAqB3I,EAAK0B,SAAS,CAAEiH,qBAChDxI,MAA6C,WAArCwI,EAAgBM,cAAc,KAGvCF,EAAAC,EAAA9G,cAAA,KAAGvB,UAAU,QAAb,yQAEAoI,EAAAC,EAAA9G,cAAA,OAAKvB,UAAU,YAEfoI,EAAAC,EAAA9G,cAAA,qEAEA6G,EAAAC,EAAA9G,cAACiH,EAAD,CACC7I,MAAM,2BACNF,MAAQuD,EACRtD,SAAW,SAACsD,GAAD,OAAU3D,EAAK0B,SAAS,CAAEiC,YAGtCoF,EAAAC,EAAA9G,cAAA,OAAKvB,UAAU,YAEfoI,EAAAC,EAAA9G,cAAA,4FAEA6G,EAAAC,EAAA9G,cAACkH,EAAD,CACC9I,MAAM,sEACN0G,KAAOwB,EACPvB,YAAc6B,EACdzI,SAAW,SAACyI,GAAD,OAAyB9I,EAAK0B,SAAS,CAAEoH,2BAGrDC,EAAAC,EAAA9G,cAAA,WAEA6G,EAAAC,EAAA9G,cAAA,OAAKvB,UAAU,kBACdoI,EAAAC,EAAA9G,cAAA,SAAOvB,UAAU,aAAjB,+FACAoI,EAAAC,EAAA9G,cAACmH,EAAD,CACCjJ,MAAQwI,EACRvI,SAAW,SAACuI,GAAD,OAAmB5I,EAAK0B,SAAS,CAAEkH,sBAIhDG,EAAAC,EAAA9G,cAAA,WAEA6G,EAAAC,EAAA9G,cAACoH,EAAD,CACChJ,MAAM,0FACNE,MAAQ,IACRwG,KAAOuB,EACPtB,YAAc4B,EACdxI,SAAW,SAACwI,GAAD,OAAuB7I,EAAK0B,SAAS,CAAEmH,iCA7ErCjH,IAAM2H,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVN7G,IAAS8G,OAAOd,EAAAC,EAAA9G,cAAC4H,EAAD,MAAS7H,SAAS8H,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59f74e8f.chunk.js","sourcesContent":["import * as React from 'react';\nimport classnames from 'classnames';\n\nimport './index.css';\n\ninterface IDefaultProps {\n    valid: boolean,\n    defaultFocused: boolean\n}\n\ninterface IProps extends IDefaultProps {\n    value: string | number,\n    onChange: (value: string) => void,\n    label?: string,\n    pattern?: string,\n    width?: string | number,\n    numeric?: boolean,\n    dotted?: boolean,\n    className?: string\n}\n\ninterface IState {\n    isFocused: boolean;\n}\n\nexport default class Input extends React.Component<IProps, IState> {\n    static defaultProps: IDefaultProps = {\n        valid: true,\n        defaultFocused: false\n    }\n\n    public state: IState = {\n        isFocused: this.props.defaultFocused\n    }\n\n    public inputRef: HTMLInputElement | null = null;\n    \n    focus = () => {\n        this.inputRef && this.inputRef.focus();\n    }\n\n    render() {\n        const { valid, value, onChange, label, pattern, width, numeric, dotted, className } = this.props,\n            { isFocused } = this.state,\n            type = \n                dotted ? \"password\" :\n                    numeric ? \"tel\":\n                        \"text\";\n\n        return(\n            <div\n                className={ classnames(className, {\n                    \"text-input\": true,\n                    \"invalid\": !valid,\n                    \"focused\": isFocused,\n                    \"not-empty\": value !== \"\"\n                }) }\n                onClick={ this.focus }\n                style={ { width } }\n            >\n                { label && <label>{ label }</label> }\n\n                <input\n                    type={ type }\n                    ref={ ref => this.inputRef = ref }\n                    value={ value }\n                    onChange={ ({ currentTarget: { value } }) => onChange(value) }\n                    autoFocus={ isFocused }\n                    onFocus={ () => this.setState({ isFocused: true }) }\n                    onBlur={ () => this.setState({ isFocused: false }) }\n                    pattern={ pattern }\n                />\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport classnames from 'classnames';\n\nimport './index.css';\n\ninterface IDefaultProps {\n    valid: boolean,\n    defaultFocused: boolean\n}\n\ninterface IProps extends IDefaultProps {\n    value: string | number,\n    onChange: (value: string) => void,\n    label?: string,\n    pattern?: string,\n    width?: string | number,\n    numeric?: boolean,\n    dotted?: boolean,\n    className?: string,\n    placeholder?: string\n}\n\ninterface IState {\n    isFocused: boolean;\n}\n\nexport default class Input extends React.Component<IProps, IState> {\n    static defaultProps: IDefaultProps = {\n        valid: true,\n        defaultFocused: false\n    }\n\n    public state: IState = {\n        isFocused: this.props.defaultFocused\n    }\n\n    public inputRef: HTMLInputElement | null = null;\n    \n    focus = () => {\n        this.inputRef && this.inputRef.focus();\n    }\n\n    render() {\n        const { valid, value, onChange, label, pattern, width, numeric, dotted, className, placeholder } = this.props,\n            { isFocused } = this.state,\n            type = \n                dotted ? \"password\" :\n                    numeric ? \"tel\":\n                        \"text\";\n\n        return(\n            <div\n                className={ classnames(className, {\n                    \"text-input\": true,\n                    \"invalid\": !valid,\n                    \"focused\": isFocused,\n                    \"not-empty\": value !== \"\"\n                }) }\n                onClick={ this.focus }\n                style={ { width } }\n            >\n                { label && <label className=\"input-label\">{ label }</label> }\n\n                { placeholder && <div className=\"input-placeholder\">{ placeholder }</div> }\n\n                <input\n                    type={ type }\n                    ref={ ref => this.inputRef = ref }\n                    value={ value }\n                    onChange={ ({ currentTarget: { value } }) => onChange(value) }\n                    autoFocus={ isFocused }\n                    onFocus={ () => this.setState({ isFocused: true }) }\n                    onBlur={ () => this.setState({ isFocused: false }) }\n                    pattern={ pattern }\n                />\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\n\nimport './index.css';\n\ninterface IPortalProps {\n    className?: string,\n    onOpen?: () => void,\n    onClose?: () => void\n}\n\nclass Portal extends React.Component<IPortalProps> {\n    public portalRef = document.createElement(\"div\");\n\n    componentDidMount() {\n        this.portalRef.classList.add(\"modal-container\");\n        document.body.appendChild(this.portalRef);\n        document.body.classList.add('no-scroll');\n        document.body.ontouchmove = (e: TouchEvent) => e.preventDefault();\n\n        this.props.onOpen && this.props.onOpen();\n    }\n\n    componentWillUnmount() {\n        document.body.removeChild(this.portalRef);\n        document.body.classList.remove('no-scroll');\n        document.body.ontouchmove = (e: TouchEvent) => true;\n\n        this.props.onClose && this.props.onClose();\n    }\n\n    render() {\n        const { children, className, onClose } = this.props;\n\n        return ReactDOM.createPortal(\n            <>\n                <div className=\"clickable modal-background\" onClick={ onClose } />\n                <div className={ classnames(\"modal-content\", className) }>\n                    { children }\n                </div>\n            </>,\n            this.portalRef\n        );\n    }\n}\n\ninterface IModalProps extends IPortalProps {\n    open: boolean\n}\n\nconst Modal: React.StatelessComponent<IModalProps> = ({ open, children, ...rest }) =>\n    open ? <Portal { ...rest }>{ children }</Portal> : null\n\nexport default Modal;","import * as React from 'react';\nimport moment from 'moment';\nimport classnames from 'classnames';\n\nimport './index.css';\n\ninterface IProps {\n    selectedDate: moment.Moment,\n    displayedDate: moment.Moment,\n    onDayClick: (date: moment.Moment) => void\n}\n\nconst DAYS_OF_WEEK = [\"ПН\", \"ВТ\", \"СР\", \"ЧТ\", \"ПТ\", \"СБ\", \"ВС\"];\n\nexport default class MonthGrid extends React.Component<IProps> {\n    getDaysForMonth = () => {\n        const date = moment(this.props.displayedDate),\n            weeks = 6,\n            arr = [],\n            offset = parseInt(date.date(1).format('e')),\n            days = date.daysInMonth();\n\n        let buf = [],\n            num;\n    \n        for(let i = 0; i < weeks; i++) {\n            buf = [];\n\n            for(let j = 0; j < 7; j++) {\n                num = i * 7 + j + 1;\n                if (num > offset && num - offset <= days) {\n                    buf.push(moment(date).date(num - offset))\n                } else {\n                    buf.push(undefined)\n                }\n            };\n\n            arr.push(buf)\n        };\n    \n        return arr\n    }\n\n    renderDay = (day: moment.Moment | undefined, dayIndex: number) => {\n        if(day === undefined) { \n            return <div key={ dayIndex } className=\"day placeholder\" />\n        }\n\n        const { selectedDate, onDayClick } = this.props;\n\n        return(\n            <div\n                key={ dayIndex }\n                className={\n                    \"clickable day \" +\n                    classnames({\n                        \"selected\": selectedDate.isSame(day, \"day\"),\n                        \"weekend\": day.weekday() >= 5\n                    })\n                }\n                onClick={ () => { onDayClick(day.startOf(\"D\")) } }\n            >{ day.date() }</div>\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"month\">\n                <div className=\"week\">\n                    { DAYS_OF_WEEK.map((weekday, index) =>\n                        <div key={ index } className=\"weekday\">{ weekday }</div>\n                    ) }\n                </div>\n\n                { this.getDaysForMonth().map((week, weekIndex) =>\n                    <div className=\"week\" key={ weekIndex }>{\n                        week.map(this.renderDay)\n                    }</div>\n                ) }\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport moment from 'moment';\n\nimport MonthGrid from './MonthGrid';\nimport Input from '../../Input';\nimport './index.css';\n\ninterface IProps {\n    value?: moment.Moment,\n    onDayClick: (value: moment.Moment) => void\n}\n\ninterface IState {\n    calendarDate: moment.Moment,\n    yearString: string,\n    monthString: string\n}\n\nexport default class Calendar extends React.Component<IProps, IState> {\n    public selectedDate = this.props.value !== undefined ? moment(this.props.value) : moment();\n\n    public state: IState = {\n        calendarDate: this.selectedDate,\n        yearString: this.selectedDate.year().toString(),\n        monthString: (this.selectedDate.month() + 1).toString()\n    }\n\n    componentDidUpdate({ value }: IProps) {\n        if(value !== this.props.value) {\n            this.selectedDate = this.props.value !== undefined ? moment(this.props.value) : moment();\n        }\n    }\n\n    handleYearChange = (yearString: string) => { \n        if(!/^[0-9]{0,4}$/.test(yearString)) return;\n\n        const year = parseInt(yearString);\n        \n        this.setState(({ calendarDate }) => ({\n            yearString,\n            calendarDate: moment(calendarDate).year(year)\n        }))\n    }\n\n    handleMonthChange = (monthString: string) => {\n        const month = parseInt(monthString) - 1;\n\n        if(month >= 0 && month <= 11) {\n            this.setState(({ calendarDate }) => ({\n                monthString,\n                calendarDate: moment(calendarDate).month(month)\n            }))\n        } else if (/^[0-9]{0,2}$/.test(monthString)) {\n            this.setState({ monthString });\n        }\n    }\n\n    handleMonthDecrease = () => {\n        const calendarDate = moment(this.state.calendarDate);\n\n        calendarDate.subtract(1, \"month\");\n\n        this.setState({ calendarDate });\n    }\n\n    handleMonthIncrease = () => {\n        const calendarDate = moment(this.state.calendarDate);\n\n        calendarDate.add(1, \"month\");\n\n        this.setState({ calendarDate });\n    }\n\n    render() {\n        const { calendarDate, yearString, monthString } = this.state,\n            { onDayClick } = this.props;\n\n        return(\n            <div className=\"calendar\">\n                <div className=\"month-input\">\n                    <Input\n                        label=\"Месяц\"\n                        value={ monthString }\n                        onChange={ this.handleMonthChange }\n                        width={ 60 }\n                        numeric\n                    />\n\n                    <Input\n                        label=\"Год\"\n                        value={ yearString }\n                        onChange={ this.handleYearChange }\n                        width={ 60 }\n                        numeric\n                    />\n                </div>\n\n                <div className=\"month-selector\">\n                    <div className=\"clickable left arrow\" onClick={ this.handleMonthDecrease } />\n                    <label className=\"selected-month\">{ calendarDate.format(\"MMMM YYYY\") }</label>\n                    <div className=\"clickable right arrow\" onClick={ this.handleMonthIncrease } />\n                </div>\n\n                <MonthGrid\n                    selectedDate={ this.selectedDate }\n                    displayedDate={ calendarDate }\n                    onDayClick={ (date) => onDayClick(date) }\n                />\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport moment from 'moment';\n\nimport Modal from '../Modal';\nimport Calendar from './Calendar';\nimport './index.css';\n\ninterface IProps {\n    value?: moment.Moment,\n    label?: string,\n    onChange: (value: moment.Moment) => void\n}\n\ninterface IState {\n    isModalOpen: boolean\n}\n\nexport default class Datepicker extends React.Component<IProps, IState> {\n    public state: IState = {\n        isModalOpen: false\n    }\n\n    onDayClick = (value: moment.Moment) => {\n        this.props.onChange(value);\n\n        this.setState({\n            isModalOpen: false\n        })\n    }\n\n    render() {\n        const { value, label } = this.props,\n            { isModalOpen } = this.state;\n\n        return(\n            <div className=\"datepicker-input\">\n                <div\n                    className={ `clickable trigger-button${ value !== undefined ? \" not-empty\" : \"\" }` }\n                    onClick={ () => this.setState({ isModalOpen: true }) }\n                >\n                    { label && <label className=\"clickable\">{ label }</label> }\n                    { value !== undefined && value.format(\"DD-MM-YYYY\") }  \n                </div>\n\n                <Modal\n                    open={ isModalOpen }\n                    onClose={ () => this.setState({ isModalOpen: false }) }\n                >\n                    <div className=\"datepicker-modal\">\n                        <div className=\"clickable close-button\" onClick={ () => this.setState({ isModalOpen: false }) } />\n                        { label && <h2>{ label }</h2> }\n\n                        <Calendar\n                            value={ value }\n                            onDayClick={ this.onDayClick }\n                        />\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport classnames from 'classnames';\n\nimport { IOption } from '../Dropdown';\nimport './index.css';\n\ninterface IProps {\n    data: IOption[],\n    selectedKey?: number,\n    width?: number,\n    onChange: (selectedKey: number) => void,\n    label?: string\n}\n\nconst SegmentedSwitch = ({ data, selectedKey, onChange, label, width }: IProps) => {\n    const segmentWidth = `${ 100 / data.length }%`;\n\n    return(   \n        <div\n            className=\"segmented-switch\"\n            style={ { minWidth: width } }\n        >\n            { label && <label className=\"segments-label\">{ label }</label> }\n            <div className=\"segments-container\">\n            {\n                data.map(segment =>\n                    <div\n                        key={ segment.key }\n                        className={ classnames(\n                            \"clickable segment\",\n                            { \"active\": segment.key === selectedKey }\n                        ) }\n                        onClick={ () => onChange(segment.key) }\n                        style={ { width: segmentWidth } }\n                    >\n                        { segment.text }\n                    </div>\n                )\n            }\n            </div>\n        </div>\n    )\n}\n\n\nexport default SegmentedSwitch;","import * as React from 'react';\nimport classnames from 'classnames';\n\nimport './index.css';\n\ninterface IProps {\n    value: boolean,\n    onChange: (value: boolean) => void\n}\n\nconst Switch = ({ value, onChange }: IProps) =>\n    <div\n        className={ classnames(\n            \"clickable\",\n            \"switch\",\n            { \"active\": value }\n        ) }\n        onClick={ () => onChange(!value) }\n    >\n\n        <div className=\"container\">\n            <div className=\"grip\" />\n        </div>\n    </div>\n\nexport default Switch;","import * as React from 'react';\nimport classnames from 'classnames';\n\nimport './index.css';\n\nexport interface IOption {\n    key: number,\n    value: any,\n    text: string\n}\n\ninterface IProps {\n    data: IOption[],\n    selectedKey?: number,\n    onChange: (key: number) => void,\n    label?: string\n}\n\ninterface IState {\n    isActive: boolean\n}\n\nexport default class Dropdown extends React.Component<IProps, IState> {\n    public state: IState = {\n        isActive: false\n    }\n\n    public dropdownRef: HTMLInputElement | null = null;\n\n    handleDropdownClick = () => {\n        if(this.dropdownRef === null) {\n            return\n        }\n\n        if(this.state.isActive) {\n            this.dropdownRef.blur();\n        } else {\n            this.dropdownRef.focus();\n        }\n    }\n\n    handleInputClick = (e: React.MouseEvent<HTMLInputElement>) => {\n        e.preventDefault();\n\n        if(this.state.isActive) {\n            this.dropdownRef!.blur();\n        } else {\n            this.dropdownRef!.focus();\n        }\n    }\n\n    render() {\n        const { isActive } = this.state,\n            { data, selectedKey, onChange, label } = this.props,\n            displayedValue = selectedKey !== undefined ? data.find(item => item.key === selectedKey)!.text : undefined;\n\n        return(\n            <div\n                className={ \n                    \"clickable dropdown \" +\n                    classnames({\n                        \"active\": isActive,\n                        \"empty\": selectedKey === undefined\n                    })\n                }\n                title={ displayedValue }\n            >\n                { label && <label>{ label }</label> }\n                <input\n                    type=\"text\"\n                    className=\"clickable fake-input\"\n                    ref={ ref => this.dropdownRef = ref }\n                    onBlur={ (e) => { e.preventDefault(); this.setState({ isActive: false }) } }\n                    onFocus={ (e) => { e.preventDefault(); this.setState({ isActive: true }) } }\n                    onMouseDown={ this.handleInputClick }\n                    readOnly\n                />\n                { displayedValue && <div className=\"displayed-value\">{ displayedValue }</div> }\n                <div className=\"arrow\" />\n\n                <div className=\"list\">\n                {\n                    data.map(option => \n                        <div\n                            key={ option.key }\n                            className={ `option${ option.key === selectedKey ? \" selected\": \"\" }` }\n                            onMouseDown={ () => onChange(option.key) }\n                        >{ option.text }</div>\n                    )\n                }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport moment from 'moment';\n\nimport Input from '../controls/Input';\nimport Input2 from '../controls/Input2';\nimport Datepicker from '../controls/Datepicker';\nimport SegmentedSwitch from '../controls/SegmentedSwitch';\nimport Switch from '../controls/Switch';\nimport Dropdown, { IOption } from '../controls/Dropdown';\nimport './index.css';\n\ninterface IState {\n\tfirstInputText: string,\n\tsecondInputText: string,\n\tdate?: moment.Moment,\n\tswitchSelectedKey?: number,\n\tswitchEnabled: boolean,\n\tdropdownSelectedKey?: number\n}\n\nconst switchData: IOption[] = [\n\t{ key: 0, value: 1, text: \"Левый\" },\n\t{ key: 1, value: 2, text: \"Правый\" }\n]\n\nconst dropdownData: IOption[] = [\n\t{ key: 0, value: 1, text: \"Красный\" },\n\t{ key: 1, value: 2, text: \"Синий\" },\n\t{ key: 2, value: 3, text: \"Чёрный\" },\n\t{ key: 3, value: 4, text: \"Белый\" },\n\t{ key: 4, value: 5, text: \"Жёлтый\" },\n\t{ key: 5, value: 6, text: \"Прозрачный\" },\n]\n\nclass App extends React.Component<{}, IState> {\n\tpublic state: IState = {\n\t\tfirstInputText: \"\",\n\t\tsecondInputText: \"\",\n\t\tswitchEnabled: false\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tfirstInputText, secondInputText,\n\t\t\tdate,\n\t\t\tswitchSelectedKey, switchEnabled, dropdownSelectedKey\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<h1>UI-элементы</h1>\n\n\t\t\t\t<h2>Текстовые поля</h2>\n\t\t\t\t\n\t\t\t\t<Input\n\t\t\t\t\tlabel=\"Текстовое поле\"\n\t\t\t\t\tvalue={ firstInputText }\n\t\t\t\t\tonChange={ (firstInputText) => this.setState({ firstInputText }) }\n\t\t\t\t\tvalid={ firstInputText.toLowerCase()[0] !== \"х\" }\n\t\t\t\t/>\n\n\t\t\t\t<br />\n\n\t\t\t\t<Input2\n\t\t\t\t\tlabel=\"Другое текстовое поле\"\n\t\t\t\t\tplaceholder=\"Тут можно писать\"\n\t\t\t\t\tvalue={ secondInputText }\n\t\t\t\t\tonChange={ (secondInputText) => this.setState({ secondInputText }) }\n\t\t\t\t\tvalid={ secondInputText.toLowerCase()[0] !== \"х\" }\n\t\t\t\t/>\n\n\t\t\t\t<p className=\"hint\">Слова, начинающиеся на \"х\", считаются неправильными</p>\n\n\t\t\t\t<div className=\"divider\" />\n\n\t\t\t\t<h2>Выбор даты</h2>\n\n\t\t\t\t<Datepicker\n\t\t\t\t\tlabel=\"Дата\"\n\t\t\t\t\tvalue={ date }\n\t\t\t\t\tonChange={ (date) => this.setState({ date }) }\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"divider\" />\n\n\t\t\t\t<h2>Переключатели</h2>\n\n\t\t\t\t<Dropdown\n\t\t\t\t\tlabel=\"Любимый цвет\"\n\t\t\t\t\tdata={ dropdownData }\n\t\t\t\t\tselectedKey={ dropdownSelectedKey }\n\t\t\t\t\tonChange={ (dropdownSelectedKey) => this.setState({ dropdownSelectedKey }) }\n\t\t\t\t/>\n\n\t\t\t\t<br />\n\n\t\t\t\t<div className=\"labeled-switch\">\n\t\t\t\t\t<label className=\"app-label\">Просто пощёлкать</label>\n\t\t\t\t\t<Switch\n\t\t\t\t\t\tvalue={ switchEnabled }\n\t\t\t\t\t\tonChange={ (switchEnabled) => this.setState({ switchEnabled }) }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<br />\n\n\t\t\t\t<SegmentedSwitch\n\t\t\t\t\tlabel=\"Левый или правый?\"\n\t\t\t\t\twidth={ 200 }\n\t\t\t\t\tdata={ switchData }\n\t\t\t\t\tselectedKey={ switchSelectedKey }\n\t\t\t\t\tonChange={ (switchSelectedKey) => this.setState({ switchSelectedKey }) }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'moment/locale/ru';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}